/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StoreDB_TYPES_H
#define StoreDB_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace storedb {

class Key;

class Value;

class Response;

class MultiResponse;

typedef struct _Key__isset {
  _Key__isset() : email(false) {}
  bool email :1;
} _Key__isset;

class Key {
 public:

  static const char* ascii_fingerprint; // = "0C4016F101C6C444DB4E691757431FAD";
  static const uint8_t binary_fingerprint[16]; // = {0x0C,0x40,0x16,0xF1,0x01,0xC6,0xC4,0x44,0xDB,0x4E,0x69,0x17,0x57,0x43,0x1F,0xAD};

  Key(const Key&);
  Key& operator=(const Key&);
  Key() : id(0), command(), email() {
  }

  virtual ~Key() throw();
  int64_t id;
  std::string command;
  std::string email;

  _Key__isset __isset;

  void __set_id(const int64_t val);

  void __set_command(const std::string& val);

  void __set_email(const std::string& val);

  bool operator == (const Key & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(command == rhs.command))
      return false;
    if (__isset.email != rhs.__isset.email)
      return false;
    else if (__isset.email && !(email == rhs.email))
      return false;
    return true;
  }
  bool operator != (const Key &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Key & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Key& obj);
};

void swap(Key &a, Key &b);

typedef struct _Value__isset {
  _Value__isset() : upVotes(false), downVotes(false) {}
  bool upVotes :1;
  bool downVotes :1;
} _Value__isset;

class Value {
 public:

  static const char* ascii_fingerprint; // = "E2396C406CD75CE894E195C727905C26";
  static const uint8_t binary_fingerprint[16]; // = {0xE2,0x39,0x6C,0x40,0x6C,0xD7,0x5C,0xE8,0x94,0xE1,0x95,0xC7,0x27,0x90,0x5C,0x26};

  Value(const Value&);
  Value& operator=(const Value&);
  Value() : command(), options(), description(), upVotes(0), downVotes(0) {
  }

  virtual ~Value() throw();
  std::string command;
  std::string options;
  std::string description;
  int64_t upVotes;
  int64_t downVotes;

  _Value__isset __isset;

  void __set_command(const std::string& val);

  void __set_options(const std::string& val);

  void __set_description(const std::string& val);

  void __set_upVotes(const int64_t val);

  void __set_downVotes(const int64_t val);

  bool operator == (const Value & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    if (!(options == rhs.options))
      return false;
    if (!(description == rhs.description))
      return false;
    if (!(upVotes == rhs.upVotes))
      return false;
    if (!(downVotes == rhs.downVotes))
      return false;
    return true;
  }
  bool operator != (const Value &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Value & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Value& obj);
};

void swap(Value &a, Value &b);

typedef struct _Response__isset {
  _Response__isset() : time(false), data(false) {}
  bool time :1;
  bool data :1;
} _Response__isset;

class Response {
 public:

  static const char* ascii_fingerprint; // = "2B9F0148AA280E12E64262FA5EF8CF2B";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0x9F,0x01,0x48,0xAA,0x28,0x0E,0x12,0xE6,0x42,0x62,0xFA,0x5E,0xF8,0xCF,0x2B};

  Response(const Response&);
  Response& operator=(const Response&);
  Response() : status(0), time(0), data() {
  }

  virtual ~Response() throw();
  bool status;
  double time;
  std::string data;

  _Response__isset __isset;

  void __set_status(const bool val);

  void __set_time(const double val);

  void __set_data(const std::string& val);

  bool operator == (const Response & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.time != rhs.__isset.time)
      return false;
    else if (__isset.time && !(time == rhs.time))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Response& obj);
};

void swap(Response &a, Response &b);

typedef struct _MultiResponse__isset {
  _MultiResponse__isset() : time(false), data(false) {}
  bool time :1;
  bool data :1;
} _MultiResponse__isset;

class MultiResponse {
 public:

  static const char* ascii_fingerprint; // = "6F3B439354C74F26BFA95443F818BC43";
  static const uint8_t binary_fingerprint[16]; // = {0x6F,0x3B,0x43,0x93,0x54,0xC7,0x4F,0x26,0xBF,0xA9,0x54,0x43,0xF8,0x18,0xBC,0x43};

  MultiResponse(const MultiResponse&);
  MultiResponse& operator=(const MultiResponse&);
  MultiResponse() : status(0), time(0) {
  }

  virtual ~MultiResponse() throw();
  bool status;
  double time;
  std::vector<std::string>  data;

  _MultiResponse__isset __isset;

  void __set_status(const bool val);

  void __set_time(const double val);

  void __set_data(const std::vector<std::string> & val);

  bool operator == (const MultiResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (__isset.time != rhs.__isset.time)
      return false;
    else if (__isset.time && !(time == rhs.time))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const MultiResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MultiResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MultiResponse& obj);
};

void swap(MultiResponse &a, MultiResponse &b);

} // namespace

#endif
